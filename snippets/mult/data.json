{
  "C++": "inline int multiply(int a, int b)\n{\n    return a * b;\n}",
  "Perl": "sub multiply { return $_[0] * $_[1] }",
  "C": "int multiply(int a, int b)\n{\n    return a * b;\n}",
  "Python": "def multiply(a, b):\n    return a * b",
  "D": "int multiply(int a, int b) {\n    return a * b;\n}",
  "E": "def multiply(a, b) {\n    return a * b\n}",
  "Standard ML": "fun multiply (x, y) = x * y",
  "Java": "public static int multiply(int a, int b) {\n    return a * b;\n}",
  "Go": "func multiply(a, b int) int {\n\treturn a * b\n}",
  "AppleScript": "on multiply(a, b)\n    return a * b\nend",
  "Elixir": "def multiply(x,y) do\n    x * y\nend",
  "Swift": "func multiply(a: Int, b: Int) -> Int {\n   return a * b\n}",
  "C#": "static double multiply(double a, double b)\n{\n    return a * b;\n}",
  "Scala": "def multiply(a: Int, b: Int) = a * b",
  "JavaScript": "function multiply(a, b) {\n  return a * b;\n}",
  "Clojure": "(defn multiply [x y]\n  (* x y))",
  "Mathematica": "multiply[a_,b_]:=a*b",
  "Rust": "fn multiply(a: i32, b: i32) -> i32 {\n    a * b\n}",
  "Common Lisp": "(defun multiply (a b)\n  (* a b))",
  "Scheme": "(define (multiply a b)\n  (* a b))",
  "PowerShell": "function multiply {\n    return $args[0] * $args[1]\n}",
  "Erlang": "multiply(A,B) ->\n\tcase {A,B} of \n\t\t{A, B} -> A * B\n\tend.",
  "APL": "multiply  \u2190  \u00d7",
  "PostScript": "/multiply{\n    /x exch def\n    /y exch def\n    x y mul =\n}def",
  "R": "mult <- function(a,b) a*b",
  "Prolog": "multiply(A, B, P) :- P is A * B.",
  "Emacs Lisp": "(defun multiply (x y)\n  (* x y))",
  "Groovy": "def multiply = { x, y -> x * y }",
  "Visual Basic": "Function multiply(a As Integer, b As Integer) As Integer\n    multiply = a * b\nEnd Function",
  "FORTRAN": "FUNCTION MULTINT(X,Y)\nINTEGER MULTINT, X, Y\nMULTINT = X * Y\nEND",
  "Shell": "multiply() {\n    return $(($1 * $2))\n}",
  "Kotlin": "fun multiply(a: Int, b: Int): Int {\n    return a * b\n}",
  "Ada": "function Multiply (A, B : Integer) return Integer;",
  "ActionScript": "function multiply(a:Number, b:Number):Number {\n    return a * b;\n}",
  "Haskell": "multiply x y = x * y",
  "OCaml": "let int_multiply x y = x * y",
  "F#": "let multiply x y = x * y",
  "Elm": "multiply x y = x*y",
  "Visual Basic Script": "function multiply( multiplicand, multiplier )\n    multiply = multiplicand * multiplier\nend function",
  "Racket": "(define (multiply a b)\n  (* a b))",
  "Julia": "function multiply(a::Number, b::Number)\n  return a * b\nend",
  "PHP": "function multiply( $a, $b )\n{\n    return $a * $b;\n}",
  "Lua": "function multiply( a, b )\n    return a * b\nend",
  "Awk": "function multiply(a, b)\n{\n  return a*b\n}",
  "Ruby": "def multiply(a, b)\n    a * b\nend",
  "TypeScript": "function multiply(a: number, b: number): number {\n  return a * b;\n}",
  "CoffeeScript": "multiply = (a, b) -> a * b"
}
